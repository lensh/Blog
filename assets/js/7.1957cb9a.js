(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(t,e,r){"use strict";r.r(e);var v=r(0),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"docker-入门"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-入门"}},[t._v("#")]),t._v(" docker 入门")]),t._v(" "),r("h2",{attrs:{id:"一、初识docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、初识docker"}},[t._v("#")]),t._v(" 一、初识docker")]),t._v(" "),r("h3",{attrs:{id:"什么是docker？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是docker？"}},[t._v("#")]),t._v(" 什么是docker？")]),t._v(" "),r("p",[t._v("Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。")]),t._v(" "),r("p",[t._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),t._v(" "),r("h3",{attrs:{id:"为什么要使用docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用docker"}},[t._v("#")]),t._v(" 为什么要使用Docker")]),t._v(" "),r("p",[t._v("1、更快速的交付和部署")]),t._v(" "),r("p",[t._v("对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。\n开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。")]),t._v(" "),r("p",[t._v("2、更高效的虚拟化")]),t._v(" "),r("p",[t._v("Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。")]),t._v(" "),r("p",[t._v("3、更轻松的迁移和扩展")]),t._v(" "),r("p",[t._v("Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。")]),t._v(" "),r("p",[t._v("4、更简单的管理")]),t._v(" "),r("p",[t._v("使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。")]),t._v(" "),r("h3",{attrs:{id:"对比传统虚拟机总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对比传统虚拟机总结"}},[t._v("#")]),t._v(" 对比传统虚拟机总结")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("特性")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("容器")]),t._v(" "),r("th",{staticStyle:{"text-align":"right"}},[t._v("虚拟机")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("启动")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("秒级")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("分钟级")])]),t._v(" "),r("tr",[r("td",[t._v("硬盘使用")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("一般为 MB")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("一般为 GB")])]),t._v(" "),r("tr",[r("td",[t._v("性能")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("接近原生")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("弱于")])]),t._v(" "),r("tr",[r("td",[t._v("系统支持量")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("单机支持上千个容器")]),t._v(" "),r("td",{staticStyle:{"text-align":"right"}},[t._v("一般几十个")])])])]),t._v(" "),r("h2",{attrs:{id:"二、基本概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、基本概念"}},[t._v("#")]),t._v(" 二、基本概念")]),t._v(" "),r("p",[t._v("Docker 包括三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。")]),t._v(" "),r("ul",[r("li",[t._v("镜像（Image）")]),t._v(" "),r("li",[t._v("容器（Container）")]),t._v(" "),r("li",[t._v("仓库（Repository）")])]),t._v(" "),r("h3",{attrs:{id:"镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[t._v("#")]),t._v(" 镜像")]),t._v(" "),r("p",[t._v("我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。")]),t._v(" "),r("p",[t._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),t._v(" "),r("h3",{attrs:{id:"容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),r("p",[t._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),t._v(" "),r("p",[t._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")])])}),[],!1,null,null,null);e.default=a.exports}}]);